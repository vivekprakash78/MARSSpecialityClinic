{"version":3,"sources":["Component/Navbar/NavbarCard.jsx","Component/Navbar/Topbar.jsx","Component/Jumbotron/Jumbotron.jsx","Component/Card/ServiceCard.jsx","Component/Service/Service.jsx","Component/Card/ProfileCard.jsx","Component/Doctor/Doctor.jsx","Component/Footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["NavbarCard","href","this","getLink","props","info","target","rel","className","icon","getIcon","getText","faPhoneAlt","faMapMarkedAlt","faBug","infoKey","infoData","find","item","infoName","infoValue","infoLink","Component","Topbar","src","alt","loading","Jumbotron","Card","service","id","size","serviceName","serviceDesciption","faBaby","faBrain","faProcedures","faHospitalUser","Service","servicesData","map","key","ProfileCard","getImagePath","doctor","picture","name","degree","specialisation","imageFile","concat","Doctor","doctorsData","Footer","faHeartbeat","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d2d3031.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPhoneAlt,\r\n  faBug,\r\n  faMapMarkedAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../../Asset/Style/NavbarCard.css\";\r\nimport infoData from \"../../Asset/Data/HospitalInfo.json\";\r\n\r\nclass NavbarCard extends Component {\r\n  render() {\r\n    return (\r\n      <a\r\n        href={this.getLink(this.props.info)}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <div className=\"navbarCard\">\r\n          <div className=\"navCardIcon\">\r\n            <FontAwesomeIcon\r\n              icon={this.getIcon(this.props.info)}\r\n              className=\"cardIcon\"\r\n            />\r\n          </div>\r\n          <div className=\"navCardText\">{this.getText(this.props.info)}</div>\r\n        </div>\r\n      </a>\r\n    );\r\n  }\r\n\r\n  getIcon(info) {\r\n    switch (info) {\r\n      case \"Call\":\r\n        return faPhoneAlt;\r\n      case \"Location\":\r\n        return faMapMarkedAlt;\r\n      default:\r\n        return faBug;\r\n    }\r\n  }\r\n  getText(infoKey) {\r\n    var info = infoData.find((item) => {\r\n      return item.infoName === infoKey;\r\n    });\r\n    if (info) {\r\n      return info.infoValue;\r\n    } else return \"You found a bug!!\";\r\n  }\r\n  getLink(infoKey) {\r\n    var info = infoData.find((item) => {\r\n      return item.infoName === infoKey;\r\n    });\r\n    if (info) {\r\n      return info.infoLink;\r\n    } else return \"You found a bug!!\";\r\n  }\r\n}\r\n\r\nexport default NavbarCard;\r\n","import React, { Component } from \"react\";\r\nimport NavbarCard from \"./NavbarCard\";\r\nimport \"../../Asset/Style/Topbar.css\";\r\n\r\nclass Topbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"topbar row no-gutters\">\r\n        <div className=\"topbar-item brand col-lg-4 col-sm-12\">\r\n          <div className=\"brand-image\">\r\n            <img\r\n              src=\"/logo192.png\"\r\n              className=\"d-inline-block align-top\"\r\n              alt=\"MARS Speciality Clinic\"\r\n              loading=\"lazy\"\r\n            />\r\n          </div>\r\n          <div className=\"brand-text\"> Speciality Clinic</div>\r\n        </div>\r\n        <div className=\"col-lg-2\"></div>\r\n        <div className=\"topbar-item info-cards col-lg-6\">\r\n          <NavbarCard info=\"Call\" />\r\n          <NavbarCard info=\"Location\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Topbar;\r\n","import React, { Component } from \"react\";\r\nimport \"../../Asset/Style/Jumbotron.css\";\r\n\r\nclass Jumbotron extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"jumbo\">\r\n        <div className=\"jumbo-image\">\r\n\r\n        </div>\r\n        <div className=\"jumbo-text\">\r\n          <h2 className=\"text\">MARS Speciality Clinic</h2>\r\n          <h5 className=\"sub-text\">Passion for Cure</h5>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\nexport default Jumbotron;\r\n","import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBaby, faBrain, faBug, faHospitalUser, faProcedures } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"media block-6 d-block text-center\">\r\n        <div\r\n          className=\"icon d-flex justify-content-center align-items-center\"\r\n        >\r\n          <FontAwesomeIcon icon={this.getIcon(this.props.service.id)} size=\"2x\" />\r\n        </div>\r\n        <div className=\"media-body p-2 mt-3\">\r\n          <h3 className=\"heading\">{this.props.service.serviceName}</h3>\r\n          <p>\r\n            {this.props.service.serviceDesciption}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  getIcon(info) {\r\n    switch (info) {\r\n      case 1:\r\n        return faBaby;\r\n      case 2:\r\n        return faBrain;\r\n      case 3:\r\n        return faProcedures;\r\n      case 4:\r\n        return faHospitalUser;\r\n      default:\r\n        return faBug;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport \"../../Asset/Style/Service.css\";\r\nimport Card from \"../Card/ServiceCard\";\r\nimport servicesData from \"../../Asset/Data/Services.json\";\r\n\r\nclass Service extends Component {\r\n  render() {\r\n    return (\r\n\r\n      <section className=\"services\">\r\n        <div className=\"container\">\r\n          <div className=\"row no-gutters\">\r\n            {servicesData.map((service) => {\r\n              return (\r\n                <div className=\"col-md-3 d-flex align-self-stretch p-4 servicesCard\" key={service.id}>\r\n                  <Card service={service} />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Service;\r\n","import React, { Component } from \"react\";\r\nclass ProfileCard extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"card profile-card-1\">\r\n        <img src=\"./Image/Doctors/doctorBackground.png\" alt=\"profileBack\" className=\"background\" />\r\n        <img src={this.getImagePath(this.props.doctor.picture)} alt=\"profile\" className=\"profile\" />\r\n        <div className=\"card-content\">\r\n          <h2>{this.props.doctor.name}<small>{this.props.doctor.degree}</small></h2>\r\n          <h4>{this.props.doctor.specialisation}</h4>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  getImagePath(imageFile) {\r\n    return \"./Image/Doctors/\".concat(imageFile);\r\n  }\r\n}\r\n\r\nexport default ProfileCard;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"../Card/ProfileCard\";\r\nimport doctorsData from \"../../Asset/Data/Doctors.json\";\r\nimport \"../../Asset/Style/Doctor.css\";\r\n\r\nclass Doctor extends Component {\r\n  render() {\r\n    return (\r\n      <section id=\"doctor\">\r\n        <div className=\"container\">\r\n          <h1 className=\"sectionHeader\">Our Doctors</h1>\r\n          <div className=\"row justify-content-around\">\r\n            {doctorsData.map((doctor) => {\r\n              return (\r\n                <div className=\"col-md-3\" key={doctor.id}>\r\n                  <Card doctor={doctor} />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Doctor;\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHeartbeat } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../../Asset/Style/Footer.css\";\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <section id=\"footer\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-xs-12 col-sm-12 col-md-12 mt-2 mt-sm-2 text-center text-black\">\r\n              <p className=\"h5\">\r\n                Made with{\" \"}\r\n                <FontAwesomeIcon icon={faHeartbeat} className=\"heartIcon\" /> in\r\n                2020\r\n              </p>\r\n            </div>\r\n            <hr />\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Topbar from \"./Component/Navbar/Topbar\";\nimport Jumbotron from \"./Component/Jumbotron/Jumbotron\";\nimport Service from \"./Component/Service/Service\";\nimport Doctor from \"./Component/Doctor/Doctor\";\nimport Footer from \"./Component/Footer/Footer\";\nfunction App() {\n  return (\n    <React.Fragment>\n      <Topbar />\n      <Jumbotron />\n      <Service />\n      <Doctor />\n      <Footer />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}