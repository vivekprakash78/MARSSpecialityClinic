{"version":3,"sources":["Component/Navbar/NavbarCard.jsx","Component/Navbar/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["NavbarCard","className","icon","this","getIcon","props","info","size","getText","fetch","then","response","json","data","console","log","faPhoneAlt","faMapMarkerAlt","faClock","faBug","Component","Navbar","href","src","width","height","alt","loading","App","Fragment","faHeartbeat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mWAwDeA,G,6KA5CX,OACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,eACb,kBAAC,IAAD,CACEC,KAAMC,KAAKC,QAAQD,KAAKE,MAAMC,MAC9BC,KAAK,KACLN,UAAU,cAGd,yBAAKA,UAAU,eAAeE,KAAKK,QAAQL,KAAKE,MAAMC,U,8BAKpDA,GAKN,OAJAG,MAAM,oDACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUC,QAAQC,IAAIF,MAEtBP,GACN,IAAK,OACH,OAAOU,IACT,IAAK,WACH,OAAOC,IACT,IAAK,SACH,OAAOC,IACT,QACE,OAAOC,O,8BAGLb,GACN,OAAQA,GACN,IAAK,OACH,MAAO,kBACT,IAAK,WACH,MAAO,sBACT,IAAK,SACH,MAAO,4BACT,QACE,MAAO,uB,GAzCUc,cC0BVC,G,mLA7BX,OACE,yBAAKpB,UAAU,2CACb,uBAAGA,UAAU,eAAeqB,KAAK,KAC/B,yBACEC,IAAI,eACJC,MAAM,KACNC,OAAO,KACPxB,UAAU,2BACVyB,IAAI,yBACJC,QAAQ,SAPZ,0BAWA,wBAAI1B,UAAU,eACZ,wBAAIA,UAAU,YACZ,kBAAC,EAAD,CAAYK,KAAK,UAEnB,wBAAIL,UAAU,YACZ,kBAAC,EAAD,CAAYK,KAAK,YAEnB,wBAAIL,UAAU,YACZ,kBAAC,EAAD,CAAYK,KAAK,oB,GAvBRc,cCgBNQ,MAdf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,yBAAK5B,UAAU,aACb,yBAAKA,UAAU,iBACb,kBAAC,IAAD,CAAiBC,KAAM4B,IAAavB,KAAK,SAE3C,yBAAKN,UAAU,iBAAf,kBCHY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.1af4d6de.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPhoneAlt,\r\n  faMapMarkerAlt,\r\n  faClock,\r\n  faBug,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../../Asset/Style/NavbarCard.css\";\r\n\r\nclass NavbarCard extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"navbarCard\">\r\n        <div className=\"navCardIcon\">\r\n          <FontAwesomeIcon\r\n            icon={this.getIcon(this.props.info)}\r\n            size=\"lg\"\r\n            className=\"cardIcon\"\r\n          />\r\n        </div>\r\n        <div className=\"navCardText\">{this.getText(this.props.info)}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getIcon(info) {\r\n    fetch(\"https://api.github.com/users/hacktivist123/repos\")\r\n      .then((response) => response.json())\r\n      .then((data) => console.log(data));\r\n\r\n    switch (info) {\r\n      case \"Call\":\r\n        return faPhoneAlt;\r\n      case \"Location\":\r\n        return faMapMarkerAlt;\r\n      case \"Timing\":\r\n        return faClock;\r\n      default:\r\n        return faBug;\r\n    }\r\n  }\r\n  getText(info) {\r\n    switch (info) {\r\n      case \"Call\":\r\n        return \"+91 12345 12345\";\r\n      case \"Location\":\r\n        return \"Shaguna More, Patna\";\r\n      case \"Timing\":\r\n        return \"9:00AM - 5:00 PM everyday\";\r\n      default:\r\n        return \"Unexpected Call\";\r\n    }\r\n  }\r\n}\r\n\r\nexport default NavbarCard;\r\n","import React, { Component } from \"react\";\r\nimport NavbarCard from \"./NavbarCard\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"../../Asset/Style/Navbar.css\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar sticky-top navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          <img\r\n            src=\"/logo512.png\"\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n            alt=\"MARS Speciality Clinic\"\r\n            loading=\"lazy\"\r\n          />\r\n          MARS Speciality Clinic\r\n        </a>\r\n        <ul className=\"nav ml-auto\">\r\n          <li className=\"nav-item\">\r\n            <NavbarCard info=\"Call\" />\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <NavbarCard info=\"Timing\" />\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <NavbarCard info=\"Location\" />\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Navbar from \"./Component/Navbar/Navbar\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeartbeat } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Navbar />\n      <div className=\"container\">\n        <div className=\"containerIcon\">\n          <FontAwesomeIcon icon={faHeartbeat} size=\"10x\" />\n        </div>\n        <div className=\"containerText\">Coming Soon</div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}